name: "DiligentGraphics: Setup Build Environment"
description: "Download build prerequisites and set up the environment"

inputs:
  module:
    description: The name of the module to configure build for
    required: false
    default: ${{ github.repository }}

  platform:
    description: Target platform (Win32, UWP, Linux, Android, MacOS, iOS, tvOS or Web)
    required: true

  vulkan-sdk-version:
    description: Vulkan SDK version
    required: false
    default: '1.4.321.0'

  java-version:
    description: Java version
    required: false
    default: '17'

  emsdk-version:
    description: Emscripten SDK version
    required: false
    default: '4.0.0'

  cmake-generator:
    description: CMake generator
    required: false

  ninja-vs-arch:
    description: Ninja architecture for Visual Studio build (x64 or Win32)
    required: false
    default: 'x64'

runs:
  using: "composite" # must be set to "composite"
  steps:
    - name: Set Environment Variables
      shell: bash
      run: |
        # Set Environment Variables
        echo "DILIGENT_TARGET_PLATFORM=${{inputs.platform}}" >> $GITHUB_ENV
        if [[ "${{ inputs.platform == 'Win32' && inputs.cmake-generator == 'MinGW Makefiles' }}" == "true" ]]; then
          echo "DILIGENT_MINGW64_BIN_DIR=/c/mingw64/bin" >> $GITHUB_ENV
        fi

    - name: Download Linux dependencies
      if: ${{ inputs.platform == 'Linux' }}
      shell: bash
      run: |
        # Download Linux dependencies
        sudo apt-get update && sudo apt-get install build-essential libx11-dev libgl1-mesa-dev mesa-vulkan-drivers xvfb
        if [[ "${{ endsWith(inputs.module, 'Samples') || endsWith(inputs.module, 'Engine') }}" == "true" ]]; then
          sudo apt-get install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        fi
        # Start Xvfb (an in-memory display server) to allow tests to run
        Xvfb :99 & # '&' starts the preceding command in the background
        echo "DISPLAY=:99" >> $GITHUB_ENV
        # Note that it takes some time for Xvfb to start, but there are plenty of steps before it is used by tests

    - name: Setup Ninja
      if: ${{ success() && (contains(inputs.cmake-generator, 'Ninja') || inputs.platform == 'Web') }}
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup VS Development Environment for Ninja
      if: ${{ success() && contains(inputs.cmake-generator, 'Ninja') && runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ inputs.ninja-vs-arch }}

    - name: Download Vulkan SDK
      if: ${{ success() && (inputs.platform == 'Linux' || inputs.platform == 'MacOS' || inputs.platform == 'iOS' || inputs.platform == 'tvOS') }}
      working-directory: ${{github.action_path}}
      shell: bash
      run: |
        # Download Vulkan SDK
        if [[ "${{ inputs.platform == 'Linux' }}" == "true" ]]; then
          chmod +x vulkan_sdk_linux.sh
          ./vulkan_sdk_linux.sh ${{inputs.vulkan-sdk-version}}
        else
          chmod +x vulkan_sdk_mac.sh
          ./vulkan_sdk_mac.sh ${{inputs.vulkan-sdk-version}}
        fi

    - name: Set up Java
      if: ${{ success() && inputs.platform == 'Android' }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ inputs.java-version }}

    - name: Setup Emscripten SDK
      if: ${{ success() && inputs.platform == 'Web' }}
      uses: mymindstorm/setup-emsdk@master
      with:
        version: ${{ inputs.emsdk-version }}
